---

# Web3 Wallet Project

这是一个基于 `viem` 的 Web3 钱包项目，提供命令行界面 (CLI) 和浏览器插件两种形式，支持 BIP-39 助记词、多账户管理、交易签名、Uniswap 交互以及多签功能。CLI 钱包专注于本地操作，而浏览器插件钱包额外支持 DApp 连接（如 MetaMask 兼容性）。

## 项目目标

1. **CLI 钱包**：
   - 通过命令行交互，提供钱包管理功能。
   - 使用 BIP-39 助记词生成种子，派生多个账户。
   - 支持基于不同账户私钥签名并发送交易。
   - 集成 Uniswap，进行代币买卖。
   - 实现多签钱包功能，支持多人共同授权交易。

2. **浏览器插件钱包**：
   - 在 CLI 钱包基础上，增加浏览器扩展功能。
   - 实现 EIP-1193 兼容性，支持 DApp 连接（如注入 `window.ethereum`）。
   - 与 CLI 钱包共享核心功能，提供图形化交互。

## 功能需求细化

### 1. CLI 钱包功能
#### 1.1 BIP-39 助记词与账户生成
- **功能描述**：基于 BIP-39 标准生成助记词（12 或 24 词），从助记词生成种子，再通过 HD 密钥派生（BIP-44）创建多个账户。
- **细节**：
  - 支持用户输入助记词恢复钱包，或随机生成新助记词。
  - 派生路径：`m/44'/60'/0'/0/n`（以太坊标准路径，`n` 为账户索引）。
  - 输出：助记词、私钥、公钥、地址。
- **完成状态**：未完成

#### 1.2 查询账户余额
- **功能描述**：查询指定账户的 ETH 和 ERC-20 代币余额。
- **细节**：
  - 支持用户输入账户索引（从派生账户中选择）。
  - 连接 Sepolia 测试网（或其他网络），通过 RPC 查询余额。
  - 支持自定义 ERC-20 代币地址和 ABI。
- **完成状态**：未完成

#### 1.3 私钥签名与转账
- **功能描述**：使用指定账户的私钥签名并发送 ETH 或 ERC-20 转账交易。
- **细节**：
  - 支持 EIP-1559 交易类型（动态 Gas 费）。
  - 用户输入：目标地址、金额、账户索引。
  - 输出：签名后的交易哈希和确认状态。
- **完成状态**：未完成

#### 1.4 Uniswap 集成
- **功能描述**：通过 Uniswap V3 合约实现代币买卖。
- **细节**：
  - 连接 Uniswap V3 Router 合约（Sepolia 测试网地址）。
  - 支持代币交换（例如 ETH -> USDC 或 USDC -> ETH）。
  - 用户输入：输入代币、输出代币、金额、滑点容忍度。
  - 自动估算 Gas 并签名发送交易。
- **完成状态**：未完成

#### 1.5 多签钱包
- **功能描述**：实现一个简单的多签钱包，支持多方签名确认交易。
- **细节**：
  - 用户设置：参与者地址列表、最小签名数。
  - 部署一个多签合约（基于 solidity 编写，例如 Gnosis Safe 简化版）。
  - CLI 提供提交交易、签名、执行交易的功能。
  - 交易需达到最小签名数后才能广播。
- **完成状态**：未完成

### 2. 浏览器插件钱包功能
#### 2.1 CLI 功能的复用
- **功能描述**：将 CLI 钱包的核心功能（助记词生成、账户管理、签名、Uniswap、多签）集成到浏览器插件。
- **细节**：
  - 使用相同的 BIP-39 和交易逻辑。
  - 提供图形化界面（HTML/CSS/JS）管理账户。
- **完成状态**：未完成

#### 2.2 DApp 连接支持
- **功能描述**：实现 EIP-1193 兼容性，支持 DApp 通过 `window.ethereum` 连接钱包。
- **细节**：
  - 注入 `window.ethereum` 对象，支持 JSON-RPC 方法（如 `eth_requestAccounts`、`eth_sendTransaction`）。
  - 弹出窗口提示用户确认连接、签名或交易。
  - 支持切换网络（例如 Sepolia、主网）。
- **完成状态**：未完成

#### 2.3 插件打包与发布
- **功能描述**：将钱包打包为浏览器插件，支持 Chrome/Firefox。
- **细节**：
  - 使用 Webpack 或类似工具打包。
  - 配置 `manifest.json`，定义权限和注入脚本。
  - 测试与主流 DApp（如 Uniswap UI）的兼容性。
- **完成状态**：未完成

## 技术栈
- **核心库**：`viem`（账户管理、交易签名、区块链交互）
- **BIP-39/HD 钱包**：`bip39` 和 `ethereumjs-wallet`（助记词和密钥派生）
- **CLI 交互**：Node.js `readline` 或 `inquirer`
- **浏览器插件**：HTML/CSS/JS，Webpack，Chrome 扩展 API
- **网络**：Sepolia 测试网（RPC 通过 Infura/Alchemy）
- **合约交互**：Uniswap V3 Router ABI，多签合约（Solidity）

## 安装与运行

### 环境要求
- Node.js >= 16.x
- npm 或 yarn

### 安装依赖
```bash
npm install viem bip39 ethereumjs-wallet readline
```

### 配置
1. 创建 `.env` 文件，配置 RPC URL：
   ```env
   RPC_URL=https://sepolia.infura.io/v3/YOUR_INFURA_API_KEY
   ```
2. 更新 Uniswap 和多签合约地址（部署后填入）。

### 运行 CLI 钱包
```bash
node wallet.js
```

### 运行浏览器插件
1. 打包插件：
   ```bash
   npm run build
   ```
2. 在 Chrome 中加载未打包的扩展（`dist` 目录）。

## 使用指南

### CLI 钱包
1. **生成助记词**：
   - 选择“生成新钱包”，保存助记词。
2. **查询余额**：
   - 输入账户索引，查看 ETH 和 ERC-20 余额。
3. **转账**：
   - 输入目标地址、金额、账户索引，签名并发送。
4. **Uniswap 交易**：
   - 输入代币对和金额，执行交换。
5. **多签交易**：
   - 创建多签钱包，提交交易，收集签名，执行。

### 浏览器插件钱包
1. 安装插件后，打开界面生成或导入助记词。
2. 连接 DApp（如 Uniswap），授权账户。
3. 在 DApp 中发起交易，插件弹窗确认。

## 开发进度
- [ ] CLI: BIP-39 助记词与账户生成
- [ ] CLI: 查询账户余额
- [ ] CLI: 私钥签名与转账
- [ ] CLI: Uniswap 集成
- [ ] CLI: 多签钱包
- [ ] 浏览器插件: CLI 功能复用
- [ ] 浏览器插件: DApp 连接支持
- [ ] 浏览器插件: 打包与发布

## 下一步计划
1. 实现 BIP-39 助记词生成和账户派生。
2. 完成基本的转账功能，测试 Sepolia 网络。
3. 集成 Uniswap V3 合约。
4. 设计并部署多签合约。
5. 开发浏览器插件 UI 和 EIP-1193 兼容性。

## 贡献
欢迎提交 PR 或报告问题！请遵循以下步骤：
1. Fork 项目。
2. 创建功能分支（`feature/xxx`）。
3. 提交代码并测试。
4. 发起 Pull Request。

## 许可证
MIT License

---

### 如何更新进度
- 在“开发进度”部分，将完成的条目标记为 `[x]`，未完成的保持 `[ ]`。
- 示例：
  ```
  - [x] CLI: BIP-39 助记词与账户生成
  - [ ] CLI: 查询账户余额
  ```

### 细化需求的说明
1. **BIP-39 和多账户**：明确使用 BIP-44 派生路径，并支持用户选择账户索引。
2. **转账签名**：指定 EIP-1559 交易类型，增强 Gas 费灵活性。
3. **Uniswap 集成**：聚焦 V3 版本，添加滑点容忍度等实用功能。
4. **多签钱包**：简化版实现，包含创建、签名、执行流程。
5. **浏览器插件**：强调 EIP-1193 兼容性和用户体验。

这个 README 提供了一个清晰的蓝图，你可以基于此逐步实现并更新。如果你需要具体功能的代码示例（比如 BIP-39 实现或多签合约），可以告诉我，我会进一步协助！